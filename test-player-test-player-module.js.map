{"version":3,"sources":["./src/app/modules/student/test-player/timer/timer.component.ts","./src/app/modules/student/test-player/timer/timer.component.html","./src/app/modules/student/test-player/test-player.component.ts","./src/app/modules/student/test-player/test-player.component.html","./src/app/modules/student/test-player/questions/questions.component.ts","./src/app/modules/student/test-player/questions/questions.component.html","./src/app/modules/student/test-player/test-player.module.ts"],"names":[],"mappings":"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","file":"test-player-test-player-module.js","sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TestPlayerService } from '../../services/test-player.service';\nimport { AlertService } from '../../../../shared/services/alert.service';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { interval, Subscription } from 'rxjs';\nimport { TestDetails } from '../../../../shared/interfaces/student.interfaces';\nimport {\n    Timer,\n    TestPlayerEndTime,\n    ServerTime,\n    TestCheck,\n    TestPlayerResponse,\n} from '../../../../shared/interfaces/test-player.interfaces';\nimport { Response } from '../../../../shared/interfaces/entity.interfaces';\nimport {\n    testPlayerMessages,\n    testPlayerServerMessages,\n    timerMessages,\n} from '../../Messages';\n\n@Component({\n    selector: 'app-timer',\n    templateUrl: './timer.component.html',\n    styleUrls: ['./timer.component.scss'],\n})\nexport class TimerComponent implements OnInit, OnDestroy {\n    @Input() test: TestDetails;\n    @Output() onCheck: EventEmitter<TestCheck> = new EventEmitter<TestCheck>();\n    time: ServerTime = {\n        curtime: 0,\n        unix_timestamp: 0,\n        offset: 0,\n    };\n    timer: Timer = {\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n    };\n    count: number;\n    timeForTest: number;\n    startDate: number;\n    endDate: number;\n    timerInterval$: Observable<number> = interval(1000);\n    intervalSubscription: Subscription;\n    timerSubscription: Subscription;\n\n    constructor(\n        private router: Router,\n        private testPlayerService: TestPlayerService,\n        private alertService: AlertService\n    ) {}\n\n    ngOnInit(): void {\n        this.intervalSubscription = this.timerInterval$.subscribe(() => {\n            this.createTimer();\n        });\n        this.getTestTime();\n    }\n\n    createTimer(): void {\n        this.timer.hours = Math.floor(this.count / (1000 * 60 * 60));\n        if (parseInt(this.timer.hours, 10) < 10) {\n            this.timer.hours = '0' + this.timer.hours;\n        }\n        this.timer.minutes = Math.floor(\n            (this.count % (1000 * 60 * 60)) / (1000 * 60)\n        );\n        if (parseInt(this.timer.minutes, 10) < 10) {\n            this.timer.minutes = '0' + this.timer.minutes;\n        }\n        this.timer.seconds = Math.floor((this.count % (1000 * 60)) / 1000);\n        if (parseInt(this.timer.seconds, 10) < 10) {\n            this.timer.seconds = '0' + this.timer.seconds;\n        }\n        this.count -= 1000;\n\n        if (this.count <= -1) {\n            this.timer.hours = '00';\n            this.timer.minutes = '00';\n            this.timer.seconds = '00';\n            this.finishTest(true);\n        }\n    }\n\n    getTestTime(): void {\n        this.timeForTest = this.test.time_for_test * 60 * 1000;\n        this.getServerTimeAndSynchronize();\n    }\n\n    getServerTimeAndSynchronize(): void {\n        this.timerSubscription = this.testPlayerService\n            .getServerTime()\n            .subscribe(\n                (response: ServerTime) => {\n                    this.time.curtime = response.unix_timestamp * 1000;\n                    this.startDate = new Date(this.time.curtime).getTime();\n                    this.endDate = this.startDate + this.timeForTest;\n                    this.count = this.endDate - this.startDate;\n                    this.getEndTestTime();\n                },\n                (error: Response) => {\n                    this.alertService.error(timerMessages('syncError'));\n                    this.router.navigate(['/student/profile']);\n                }\n            );\n    }\n\n    getEndTestTime(): void {\n        this.timerSubscription = this.testPlayerService\n            .testPlayerGetEndTime()\n            .subscribe(\n                (endTime: TestPlayerEndTime) => {\n                    if (endTime.response === 'Empty slot') {\n                        this.saveTestTime();\n                    } else {\n                        this.count = endTime.end - this.startDate;\n                        if (this.count > this.endDate - this.startDate) {\n                            this.count = this.endDate - this.startDate;\n                        }\n                        if (this.count === null) {\n                            this.resetSession(true);\n                        }\n                    }\n                },\n                (error: Response) => {\n                    this.alertService.error(timerMessages('endError'));\n                    this.router.navigate(['/student/profile']);\n                }\n            );\n    }\n\n    saveTestTime(): void {\n        this.timerSubscription = this.testPlayerService\n            .testPlayerSaveEndTime({\n                end: this.startDate + this.count,\n            })\n            .subscribe(\n                () => {},\n                (error: Response) => {\n                    this.alertService.error(timerMessages('saveError'));\n                    this.router.navigate(['/student/profile']);\n                }\n            );\n    }\n\n    finishTest(gone: boolean): void {\n        if (gone) {\n            this.intervalSubscription.unsubscribe();\n            this.resetSession(false);\n        } else {\n            this.onCheck.emit({ time: false, finish: true });\n        }\n    }\n\n    resetSession(count: boolean): void {\n        this.timerSubscription = this.testPlayerService\n            .testPlayerResetSession()\n            .subscribe(\n                (response: TestPlayerResponse) => {\n                    if (response && count) {\n                        this.alertService.error(timerMessages('timerError'));\n                    } else if (response && !count) {\n                        this.alertService.message(\n                            testPlayerMessages('finish', false, '', true)\n                        );\n                        this.onCheck.emit({ time: true, finish: false });\n                    }\n                },\n                (error: Response) => {\n                    this.alertService.error(testPlayerServerMessages('reset'));\n                    this.router.navigate(['/student/profile']);\n                }\n            );\n    }\n\n    ngOnDestroy(): void {\n        if (this.timerSubscription || this.intervalSubscription) {\n            this.timerSubscription.unsubscribe();\n            this.intervalSubscription.unsubscribe();\n        }\n    }\n}\n","<div class=\"timer\">\n    <div class=\"timer__info\">\n        <h1 class=\"test-name\">\n            <mat-icon class=\"timer-icon\">school</mat-icon>\n            {{ test.test_name }}\n        </h1>\n        <h1 class=\"test-subject\">\n            <mat-icon class=\"timer-icon\">collections_bookmark</mat-icon>\n            {{ test.subjectname }}\n        </h1>\n    </div>\n    <div class=\"timer__panel\">\n        <h1 class=\"timer-panel-text\">До завершення тесту:</h1>\n        <div\n            [ngClass]=\"{\n                warning: timer.minutes < 10 && timer.hours == 0,\n                danger: timer.minutes < 2 && timer.hours == 0\n            }\"\n            class=\"timer-circle\"\n            *ngIf=\"timer.hours || timer.minutes || timer.seconds; else initTime\"\n        >\n            <h1 class=\"timer-numbers\">\n                <mat-icon class=\"timer-panel-icon\">schedule</mat-icon>\n                {{ timer.hours }}:{{ timer.minutes }}:{{ timer.seconds }}\n            </h1>\n        </div>\n        <ng-template #initTime>\n            <div class=\"timer-circle\">\n                <h1 class=\"timer-init\">\n                    <mat-icon class=\"timer-panel-icon\">schedule</mat-icon>\n                    Визначення часу...\n                </h1>\n            </div>\n        </ng-template>\n    </div>\n    <div class=\"timer__actions\">\n        <button\n            type=\"button\"\n            class=\"finish-btn\"\n            mat-flat-button\n            color=\"warn\"\n            (click)=\"finishTest(false)\"\n            matTooltip=\"Завершити тестування та показати результат\"\n        >\n            <mat-icon>check</mat-icon>\n            Завершити тест\n        </button>\n    </div>\n</div>\n<mat-divider></mat-divider>\n","import { Component, HostListener, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationExtras, Router } from '@angular/router';\nimport { TestPlayerService } from '../services/test-player.service';\nimport { ModalService } from '../../../shared/services/modal.service';\nimport { AlertService } from '../../../shared/services/alert.service';\nimport { ConfirmComponent } from '../../../shared/components/confirm/confirm.component';\nimport { Subscription } from 'rxjs';\nimport { TestDetails } from '../../../shared/interfaces/student.interfaces';\nimport {\n    DialogResult,\n    Response,\n} from '../../../shared/interfaces/entity.interfaces';\nimport {\n    TestPlayerResponse,\n    QA,\n    TestCheck,\n    TestPlayerQAError,\n    AnswerData,\n    TestResult,\n    TestPlayerNavigate,\n} from '../../../shared/interfaces/test-player.interfaces';\nimport {\n    snackBarMessages,\n    testPlayerMessages,\n    testPlayerServerMessages,\n} from '../Messages';\n\n@Component({\n    selector: 'app-test-player',\n    templateUrl: './test-player.component.html',\n    styleUrls: ['./test-player.component.scss'],\n})\nexport class TestPlayerComponent implements OnInit, OnDestroy {\n    loading = false;\n    currentTest: TestDetails;\n    testQuestionsAndAnswers: QA[] = [];\n    studentAnswers: AnswerData[] = [];\n    playerSubscription: Subscription;\n\n    @HostListener('window:beforeunload', ['$event'])\n    onReloadHandler(event: Event): void {\n        event.returnValue = true;\n    }\n\n    constructor(\n        private router: Router,\n        private testPlayerService: TestPlayerService,\n        private modalService: ModalService,\n        private alertService: AlertService\n    ) {}\n\n    ngOnInit(): void {\n        this.loading = true;\n        this.initCurrentTest();\n    }\n\n    initCurrentTest(): void {\n        this.playerSubscription = this.testPlayerService\n            .testPlayerGetData()\n            .subscribe(\n                (response: TestPlayerResponse) => {\n                    if (response.response === 'Empty slot') {\n                        this.alertService.warning(\n                            testPlayerMessages('emptySlot')\n                        );\n                        this.navigateTo('profile');\n                    } else {\n                        this.startTestPlayer(response);\n                    }\n                },\n                (error: Response) => {\n                    this.alertService.error(testPlayerServerMessages('get'));\n                }\n            );\n    }\n\n    startTestPlayer(response: TestPlayerResponse): void {\n        if (\n            !response.id &&\n            !response.currentTest &&\n            +response.id !== +response.currentTest.test_id\n        ) {\n            this.resetSession(false);\n            this.navigateTo('profile');\n            localStorage.setItem('isMatch', 'notMatch');\n        } else {\n            this.currentTest = response.currentTest;\n            this.getTestQA(+response.currentTest.test_id);\n        }\n    }\n\n    getTestQA(id: number): void {\n        this.testPlayerService.getAllQuestionsDataForTest(+id).subscribe(\n            (testQuestionsAndAnswers: QA[]) => {\n                this.testQuestionsAndAnswers = testQuestionsAndAnswers;\n                this.loading = false;\n            },\n            (error: TestPlayerQAError) => {\n                this.loading = false;\n                this.getTestQAErrorHandler(error);\n                this.navigateTo('profile');\n            }\n        );\n    }\n\n    getTestQAErrorHandler(error: TestPlayerQAError): void {\n        switch (error.error.response) {\n            case testPlayerMessages('withoutMakingQuiz', true):\n                this.alertService.error(\n                    testPlayerMessages('withoutMakingQuiz', false)\n                );\n                break;\n            case testPlayerMessages('enoughNumber', true):\n                this.alertService.error(\n                    testPlayerMessages('enoughNumber', false)\n                );\n                break;\n            default:\n                this.alertService.error(testPlayerMessages('default'));\n                break;\n        }\n    }\n\n    finishTest(event: TestCheck): void {\n        if (event.finish && !event.time) {\n            this.modalService.openModal(\n                ConfirmComponent,\n                {\n                    data: {\n                        icon: 'cancel',\n                        message: testPlayerMessages(\n                            'sureFinish',\n                            false,\n                            this.currentTest.test_name\n                        ),\n                    },\n                },\n                (result: DialogResult) => {\n                    if (result) {\n                        this.resetSession(true);\n                    } else if (!result) {\n                        this.alertService.message(snackBarMessages('cancel'));\n                    }\n                }\n            );\n        } else if (!event.finish && event.time) {\n            this.checkTest();\n        }\n    }\n\n    studentAnswer(event: AnswerData[]): void {\n        this.studentAnswers = event;\n        sessionStorage.setItem('test_progress', JSON.stringify(event));\n    }\n\n    checkTest(): void {\n        this.playerSubscription = this.testPlayerService\n            .checkDoneTest(this.studentAnswers)\n            .subscribe(\n                (response: TestResult) => {\n                    this.navigateTo('results', response);\n                },\n                (error: Response) => {\n                    this.alertService.error(testPlayerMessages('checkError'));\n                    this.navigateTo('profile');\n                }\n            );\n    }\n\n    navigateTo(navigate: TestPlayerNavigate, result?: TestResult): void {\n        if (navigate === 'results') {\n            const navigationExtras: NavigationExtras = {\n                state: {\n                    result: result,\n                    countOfQuestions: this.testQuestionsAndAnswers.length,\n                    testName: this.currentTest.test_name,\n                    subjectName: this.currentTest.subjectname,\n                },\n            };\n            this.router.navigate(\n                ['/student/test-player/results'],\n                navigationExtras\n            );\n        } else if (navigate === 'profile') {\n            this.router.navigate(['/student/profile']);\n        }\n    }\n\n    resetSession(finish: boolean): void {\n        this.playerSubscription = this.testPlayerService\n            .testPlayerResetSession()\n            .subscribe(\n                (response: TestPlayerResponse) => {\n                    if (response && finish) {\n                        this.alertService.message(\n                            testPlayerMessages('finish', false, '', false)\n                        );\n                        this.checkTest();\n                    }\n                },\n                (error: Response) => {\n                    this.alertService.error(testPlayerServerMessages('reset'));\n                }\n            );\n    }\n\n    ngOnDestroy(): void {\n        if (this.playerSubscription) {\n            this.playerSubscription.unsubscribe();\n        }\n    }\n}\n","<section class=\"test-player\" *ngIf=\"!loading; else loader\">\n    <div class=\"test-player__container\">\n        <div class=\"test-player__header\">\n            <app-timer\n                (onCheck)=\"finishTest($event)\"\n                [test]=\"currentTest\"\n            ></app-timer>\n        </div>\n        <div class=\"test-player__content\">\n            <app-questions\n                (onAnswer)=\"studentAnswer($event)\"\n                [questionsAndAnswers]=\"testQuestionsAndAnswers\"\n            ></app-questions>\n        </div>\n    </div>\n</section>\n<ng-template #loader>\n    <app-loader></app-loader>\n</ng-template>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport {\n    AnswerData,\n    QA,\n} from '../../../../shared/interfaces/test-player.interfaces';\nimport { Answer } from '../../../../shared/interfaces/student.interfaces';\nimport { MatCheckboxChange } from '@angular/material/checkbox';\n\n@Component({\n    selector: 'app-questions',\n    templateUrl: './questions.component.html',\n    styleUrls: ['./questions.component.scss'],\n})\nexport class QuestionsComponent implements OnInit {\n    @Input() questionsAndAnswers: QA[];\n    @Output() onAnswer: EventEmitter<AnswerData[]> = new EventEmitter<\n        AnswerData[]\n    >();\n    isAnswer: number[] = [];\n    answersIdNum = [];\n    answerIdsMulti: number[] = [];\n    completed: number[] = [];\n    btnCount: number[] = [];\n    startTest = 0;\n    sendAnswerData: AnswerData[] = [];\n    textValue: string[] = [];\n\n    constructor() {}\n\n    ngOnInit(): void {\n        this.onAnswer.emit(this.firstEmitData());\n        this.getRandomAnswers(this.questionsAndAnswers);\n        this.btnCount = [...Array(this.questionsAndAnswers.length).keys()];\n    }\n    firstEmitData() {\n        let firstEmit = [];\n        firstEmit = this.questionsAndAnswers.map((elem) => {\n            return { question_id: +elem.question_id, answer_ids: [''] };\n        });\n        return firstEmit;\n    }\n    changeQuestion(event: Event, index: number) {\n        event.preventDefault();\n        this.startTest = index;\n    }\n\n    trueAnswerMulti(event: MatCheckboxChange, id: number): void {\n        if (event.checked) {\n            this.answerIdsMulti.push(id);\n        } else if (!event.checked) {\n            this.answerIdsMulti = this.answerIdsMulti.filter(\n                (elem) => elem !== id\n            );\n        }\n        this.sendAnswerData[this.startTest] = this.createStudentAnswer(\n            +this.questionsAndAnswers[this.startTest].question_id,\n            this.answerIdsMulti\n        );\n        this.onAnswer.emit(this.removeEmptyElem(this.sendAnswerData));\n        this.markStudentAnswer();\n    }\n\n    trueAnswerSimpleOne(event: MatCheckboxChange, answerId: number): void {\n        if (event.checked) {\n            this.completed[this.startTest] = answerId;\n            this.sendAnswerData[this.startTest] = this.createStudentAnswer(\n                +this.questionsAndAnswers[this.startTest].question_id,\n                [answerId]\n            );\n        } else if (!event.checked) {\n            this.completed[this.startTest] = null;\n            this.sendAnswerData[this.startTest] = null;\n        }\n        this.onAnswer.emit(this.removeEmptyElem(this.sendAnswerData));\n        this.markStudentAnswer();\n    }\n\n    trueAnswerText(event: Event): void {\n        const value = (event.target as HTMLInputElement).value;\n        this.textValue[this.startTest] = value ? value : null;\n        this.sendUserAnswer(value);\n    }\n\n    truAnswerNum(event: Event): void {\n        const value = (event.target as HTMLInputElement).value;\n        this.answersIdNum[this.startTest] = value ? value : null;\n        this.sendUserAnswer(value);\n    }\n\n    sendUserAnswer(value: any): void {\n        this.sendAnswerData[this.startTest] = this.createStudentAnswer(\n            +this.questionsAndAnswers[this.startTest].question_id,\n            [value]\n        );\n        this.onAnswer.emit(this.removeEmptyElem(this.sendAnswerData));\n        this.markStudentAnswer();\n    }\n\n    createStudentAnswer(\n        questionId: number,\n        answerId: Array<number>\n    ): AnswerData {\n        return { question_id: questionId, answer_ids: answerId };\n    }\n\n    removeEmptyElem(array: AnswerData[]): AnswerData[] {\n        return array.filter((el) => el !== null);\n    }\n\n    getTrueAnswer(answerId: number, index: number): boolean {\n        if (this.sendAnswerData[index]) {\n            return this.sendAnswerData[index].answer_ids.includes(answerId);\n        }\n    }\n\n    markStudentAnswer(): void {\n        this.isAnswer = this.sendAnswerData.map((elem, index) => {\n            return !elem ||\n                elem.answer_ids.includes(null) ||\n                !elem.answer_ids.length\n                ? -1\n                : index;\n        });\n    }\n    getShuffledArr(arr: Answer[]): Answer[] {\n        return arr.reduce(\n            (newArr, _, i) => {\n                const rand =\n                    i + Math.floor(Math.random() * (newArr.length - i));\n                [newArr[rand], newArr[i]] = [newArr[i], newArr[rand]];\n                return newArr;\n            },\n            [...arr]\n        );\n    }\n    getRandomAnswers(arr: QA[]): void {\n        arr.forEach((elem) => {\n            elem.answers = this.getShuffledArr(elem.answers);\n        });\n    }\n}\n","<div class=\"quiz\">\n    <form>\n        <div class=\"quiz__button-question\">\n            <button\n                class=\"quiz__number_of_question\"\n                mat-raised-button\n                color=\"primary\"\n                *ngFor=\"let btn of btnCount; let i = index\"\n                (click)=\"changeQuestion($event, i)\"\n                [ngClass]=\"{\n                    active: startTest === i,\n                    done: isAnswer[i] === i\n                }\"\n            >\n                {{ i + 1 }}\n            </button>\n        </div>\n        <div class=\"quiz__question-container\">\n            <h2 class=\"quiz__question-text\">\n                {{ questionsAndAnswers[startTest].question_text }}\n            </h2>\n            <div\n                class=\"quiz__question-picture\"\n                *ngIf=\"questionsAndAnswers[startTest].attachment\"\n            >\n                <img\n                    mat-card-image\n                    src=\"{{ questionsAndAnswers[startTest].attachment }}\"\n                    alt=\"question picture\"\n                />\n            </div>\n        </div>\n        <div class=\"quiz__answers-block\">\n            <ng-container\n                *ngIf=\"questionsAndAnswers[startTest].type === '1'\"\n                class=\"type_one answer-attachment\"\n            >\n                <div\n                    *ngFor=\"\n                        let answer of questionsAndAnswers[startTest].answers\n                    \"\n                >\n                    <div>\n                        <mat-checkbox\n                            class=\"simple-checkbox\"\n                            [checked]=\"\n                                answer.answer_id === completed[startTest]\n                            \"\n                            id=\"{{ answer.answer_id }}\"\n                            (change)=\"\n                                trueAnswerSimpleOne($event, answer.answer_id)\n                            \"\n                        ></mat-checkbox>\n                        <span class=\"answer-text\">{{\n                            answer.answer_text\n                        }}</span>\n                    </div>\n                    <div *ngIf=\"answer.attachment\">\n                        <img\n                            mat-card-image\n                            src=\"{{ answer.attachment }}\"\n                            alt=\"answer picture\"\n                        />\n                    </div>\n                </div>\n            </ng-container>\n            <ng-container\n                *ngIf=\"questionsAndAnswers[startTest].type === '2'\"\n                class=\"type__two answer-attachment\"\n            >\n                <div\n                    *ngFor=\"\n                        let answer of questionsAndAnswers[startTest].answers\n                    \"\n                >\n                    <div>\n                        <mat-checkbox\n                            id=\"{{ answer.answer_id }}\"\n                            [checked]=\"\n                                getTrueAnswer(answer.answer_id, startTest)\n                            \"\n                            class=\"example-margin\"\n                            (change)=\"trueAnswerMulti($event, answer.answer_id)\"\n                        ></mat-checkbox>\n                        <span class=\"answer-text\">{{\n                            answer.answer_text\n                        }}</span>\n                    </div>\n                    <div *ngIf=\"answer.attachment\">\n                        <img\n                            mat-card-image\n                            src=\"{{ answer.attachment }}\"\n                            alt=\"answer picture\"\n                        />\n                    </div>\n                </div>\n            </ng-container>\n            <div\n                class=\"type_three\"\n                *ngIf=\"questionsAndAnswers[startTest].type === '3'\"\n            >\n                <mat-form-field>\n                    <mat-label>Ваша відповідь</mat-label>\n                    <input\n                        matInput\n                        type=\"text\"\n                        [value]=\"\n                            textValue[startTest] ? textValue[startTest] : ''\n                        \"\n                        (change)=\"trueAnswerText($event)\"\n                    />\n                </mat-form-field>\n            </div>\n            <div\n                class=\"type_four\"\n                *ngIf=\"questionsAndAnswers[startTest].type === '4'\"\n            >\n                <mat-form-field>\n                    <mat-label>Введіть значення</mat-label>\n                    <input\n                        [value]=\"\n                            answersIdNum[this.startTest]\n                                ? answersIdNum[this.startTest]\n                                : ''\n                        \"\n                        matInput\n                        type=\"number\"\n                        (change)=\"truAnswerNum($event)\"\n                    />\n                </mat-form-field>\n            </div>\n        </div>\n    </form>\n</div>\n<mat-divider></mat-divider>\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../../shared/modules/shared.module';\nimport { ChartsModule } from 'ng2-charts';\n\nimport { TestPlayerComponent } from './test-player.component';\nimport { TimerComponent } from './timer/timer.component';\nimport { ResultsComponent } from './results/results.component';\nimport { QuestionsComponent } from './questions/questions.component';\nimport { AnswersChartComponent } from './results/answers-chart/answers-chart.component';\n\n@NgModule({\n    declarations: [\n        TestPlayerComponent,\n        TimerComponent,\n        ResultsComponent,\n        QuestionsComponent,\n        AnswersChartComponent,\n    ],\n    imports: [\n        CommonModule,\n        SharedModule,\n        ChartsModule,\n        RouterModule.forChild([{ path: '', component: TestPlayerComponent }]),\n    ],\n})\nexport class TestPlayerModule {}\n"],"sourceRoot":"webpack:///"}