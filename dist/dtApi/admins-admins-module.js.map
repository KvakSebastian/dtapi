{"version":3,"sources":["./src/app/modules/admin/admins/admins.service.ts","./src/app/modules/admin/admins/admins.module.ts","./src/app/modules/admin/admins/admin-modal-creation/admin-modal-creation.component.ts","./src/app/modules/admin/admins/admin-modal-creation/admin-modal-creation.component.html","./src/app/modules/admin/admins/validators/password-match.validator.ts","./src/app/modules/admin/admins/delete-confirm-modal/delete-confirm-modal.component.ts","./src/app/modules/admin/admins/delete-confirm-modal/delete-confirm-modal.component.html","./src/app/modules/admin/admins/admins.component.ts","./src/app/modules/admin/admins/admins.component.html"],"names":[],"mappings":"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","file":"admins-admins-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport { Admins } from './Admins';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AdminsCrudService {\n    private entity = 'AdminUser';\n    constructor(private httpInstance: HttpClient) {}\n\n    getAdmins(): Observable<any> {\n        return this.httpInstance\n            .get(`${environment.BASEURL}${this.entity}/getRecords`)\n            .pipe(\n                map((val: Array<Admins>) => {\n                    return val.map((item) => {\n                        return {\n                            id: item.id,\n                            email: item.email,\n                            username: item.username,\n                        };\n                    });\n                })\n            );\n    }\n\n    addAdmin(body: string): Observable<any> {\n        return this.httpInstance.post(\n            `${environment.BASEURL}${this.entity}/insertData`,\n            body\n        );\n    }\n    updateAdmin(body: string, id: string): Observable<any> {\n        return this.httpInstance.post(\n            `${environment.BASEURL}${this.entity}/update/${id}`,\n            body\n        );\n    }\n    deleteAdmin(id: string): Observable<any> {\n        return this.httpInstance.delete(\n            `${environment.BASEURL}${this.entity}/del/${id}`\n        );\n    }\n    checkAdminName(username: string): Observable<any> {\n        return this.httpInstance.get(\n            `${environment.BASEURL}${this.entity}/checkUserName/${username}`\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RouterModule, Routes } from '@angular/router';\nimport { AdminsComponent } from './admins.component';\nimport { SharedModule } from 'src/app/shared/modules/shared.module';\nimport { AdminModalCreationComponent } from './admin-modal-creation/admin-modal-creation.component';\nimport { DeleteConfirmModalComponent } from './delete-confirm-modal/delete-confirm-modal.component';\n\nconst routes: Routes = [{ path: '', component: AdminsComponent }];\n\n@NgModule({\n    declarations: [\n        AdminsComponent,\n        AdminModalCreationComponent,\n        DeleteConfirmModalComponent,\n    ],\n    imports: [CommonModule, SharedModule, RouterModule.forChild(routes)],\n    exports: [AdminsComponent],\n})\nexport class AdminsModule {}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n    FormBuilder,\n    FormControl,\n    FormGroup,\n    Validators,\n} from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ModalData } from '../Admins';\nimport { MustMatch } from '../validators/password-match.validator';\nimport { AdminsCrudService } from '../admins.service';\nimport { pluck, switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\n@Component({\n    selector: 'app-admin-modal-creation',\n    templateUrl: './admin-modal-creation.component.html',\n    styleUrls: ['./admin-modal-creation.component.scss'],\n})\nexport class AdminModalCreationComponent implements OnInit {\n    constructor(\n        public dialogRef: MatDialogRef<AdminModalCreationComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: ModalData,\n        private formBuilder: FormBuilder,\n        private adminservice: AdminsCrudService,\n        private snackBar: MatSnackBar\n    ) {}\n    hide = true;\n    AdminForm: FormGroup;\n    formForUpdateCondition: boolean = this.data.title !== 'Редагувати адміна';\n\n    ngOnInit(): void {\n        this.AdminForm = this.formBuilder.group(\n            {\n                username: new FormControl(\n                    this.data.user ? this.data.user.username : null,\n                    Validators.required\n                ),\n                email: new FormControl(\n                    this.data.user ? this.data.user.email : null,\n                    Validators.email\n                ),\n                password: new FormControl(\n                    null,\n                    Validators.pattern(\n                        '((?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,30})'\n                    )\n                ),\n                password_confirm: new FormControl(null),\n            },\n            {\n                validator: MustMatch('password', 'password_confirm'),\n            }\n        );\n    }\n    get adminControls() {\n        return this.AdminForm.controls;\n    }\n    deleteUpdateFormNameValidation() {\n        this.AdminForm.get('username').clearValidators();\n        this.AdminForm.get('username').updateValueAndValidity();\n    }\n    addAdmin(formValues): void {\n        const snackbar = this.snackBar;\n        this.adminservice.addAdmin(formValues).subscribe(\n            (newUser) => {\n                snackbar.open('Адміна успішно додано', 'Закрити', {\n                    duration: 3000,\n                });\n                this.dialogRef.close({\n                    finished: true,\n                    user: newUser,\n                });\n            },\n            (err) => {\n                snackbar.open('Адмін з такими даними існує', 'Закрити', {\n                    duration: 3000,\n                });\n            }\n        );\n    }\n    updateAdmin(formValues, data): void {\n        const snackbar = this.snackBar;\n        this.adminservice\n            .checkAdminName(this.AdminForm.get('username').value)\n            .pipe(\n                pluck('response'),\n                switchMap((response: boolean) => {\n                    if (response) {\n                        snackbar.open(\"Таке ім'я вже існує\", 'Закрити', {\n                            duration: 3000,\n                        });\n                        return of(response);\n                    } else {\n                        return this.adminservice\n                            .updateAdmin(\n                                JSON.stringify(formValues),\n                                data.user.id\n                            )\n                            .pipe(pluck('response'));\n                    }\n                })\n            )\n            .subscribe(\n                (res) => {\n                    snackbar.open('Адміна успішно відредаговано', 'Закрити', {\n                        duration: 3000,\n                    });\n                    this.dialogRef.close({\n                        finished: true,\n                        user: {\n                            id: data.user.id,\n                            ...formValues,\n                        },\n                    });\n                },\n                (err) => {\n                    snackbar.open('Щось пішло не так', 'Закрити', {\n                        duration: 3000,\n                    });\n                }\n            );\n    }\n    submit(data: any): void {\n        if (this.AdminForm.valid) {\n            switch (data.title) {\n                case 'Додати адміна':\n                    this.addAdmin(this.AdminForm.value);\n                    break;\n                case 'Редагувати адміна':\n                    this.updateAdmin(this.AdminForm.value, data);\n                    break;\n            }\n        }\n    }\n    onNoClick(): void {\n        this.dialogRef.close();\n    }\n}\n","<form\n    action=\"post\"\n    [formGroup]=\"AdminForm\"\n    (ngSubmit)=\"submit(data)\"\n    novalidate\n    class=\"admins-modal\"\n>\n    <h1 mat-dialog-title class=\"modal-title\">{{ data.title }}</h1>\n    <div *ngIf=\"formForUpdateCondition; else updateForm\" mat-dialog-content>\n        <mat-form-field class=\"modal-field\">\n            <mat-label class=\"modal-entity-input\"\n                ><mat-icon>person</mat-icon> Ім'я</mat-label\n            >\n            <input\n                name=\"username\"\n                matInput\n                formControlName=\"username\"\n                cdkFocusInitial\n                required\n            />\n            <small\n                *ngIf=\"\n                    AdminForm.controls['username'].invalid &&\n                    AdminForm.controls['username'].touched\n                \"\n            >\n                Неправильне ім'я\n            </small>\n        </mat-form-field>\n        <mat-form-field class=\"modal-field\">\n            <mat-label><mat-icon>email</mat-icon> E-mail</mat-label>\n            <input\n                name=\"email\"\n                pattern=\"[a-zA-Z_]+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}\"\n                matInput\n                formControlName=\"email\"\n                required\n            />\n            <small\n                *ngIf=\"\n                    adminControls['email'].invalid &&\n                    adminControls['email'].touched\n                \"\n            >\n                Неправильний email\n            </small>\n        </mat-form-field>\n        <mat-form-field class=\"modal-field\">\n            <mat-label><mat-icon>vpn_key</mat-icon> Пароль</mat-label>\n            <input\n                name=\"password\"\n                [type]=\"hide ? 'password' : 'text'\"\n                matInput\n                formControlName=\"password\"\n                required\n            />\n            <button\n                mat-icon-button\n                matSuffix\n                (click)=\"hide = !hide\"\n                [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\"\n            >\n                <mat-icon>{{\n                    hide ? 'visibility_off' : 'visibility'\n                }}</mat-icon>\n            </button>\n            <small\n                *ngIf=\"\n                    adminControls['password'].invalid &&\n                    adminControls['password'].touched\n                \"\n            >\n                <ul>\n                    <li>Мінімум 9 символів</li>\n                    <li>Одна велика та мала буква та 1 цифра</li>\n                </ul>\n            </small>\n        </mat-form-field>\n        <mat-form-field class=\"modal-field\">\n            <mat-label>Підтвердіть пароль</mat-label>\n            <input\n                name=\"password_confirm\"\n                matInput\n                formControlName=\"password_confirm\"\n                [type]=\"hide ? 'password' : 'text'\"\n                required\n            />\n            <button\n                mat-icon-button\n                matSuffix\n                (click)=\"hide = !hide\"\n                [attr.aria-label]=\"'Hide password'\"\n                [attr.aria-pressed]=\"hide\"\n            >\n                <mat-icon>{{\n                    hide ? 'visibility_off' : 'visibility'\n                }}</mat-icon>\n            </button>\n            <small\n                *ngIf=\"\n                    adminControls['password_confirm'].invalid &&\n                    adminControls['password_confirm'].touched\n                \"\n            >\n                Паролі не однакові\n            </small>\n        </mat-form-field>\n    </div>\n    <ng-template #updateForm>\n        <div mat-dialog-content>\n            <mat-form-field class=\"modal-field\">\n                <mat-label><mat-icon>person</mat-icon> Ім'я</mat-label>\n                <input\n                    name=\"username\"\n                    matInput\n                    formControlName=\"username\"\n                    cdkFocusInitial\n                    (focus)=\"deleteUpdateFormNameValidation()\"\n                />\n                <small\n                    *ngIf=\"\n                        AdminForm.controls['username'].invalid &&\n                        AdminForm.controls['username'].touched\n                    \"\n                >\n                    Неправильне ім'я\n                </small>\n            </mat-form-field>\n            <mat-form-field class=\"modal-field\">\n                <mat-label><mat-icon>email</mat-icon> E-mail</mat-label>\n                <input\n                    name=\"email\"\n                    pattern=\"[a-zA-Z_]+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}\"\n                    matInput\n                    formControlName=\"email\"\n                />\n                <small\n                    *ngIf=\"\n                        adminControls['email'].invalid &&\n                        adminControls['email'].touched\n                    \"\n                >\n                    Неправильний email\n                </small>\n            </mat-form-field>\n            <mat-form-field class=\"modal-field\">\n                <mat-label><mat-icon>vpn_key</mat-icon> Пароль</mat-label>\n                <input\n                    name=\"password\"\n                    [type]=\"hide ? 'password' : 'text'\"\n                    matInput\n                    formControlName=\"password\"\n                />\n                <button\n                    mat-icon-button\n                    matSuffix\n                    (click)=\"hide = !hide\"\n                    [attr.aria-label]=\"'Hide password'\"\n                    [attr.aria-pressed]=\"hide\"\n                >\n                    <mat-icon>{{\n                        hide ? 'visibility_off' : 'visibility'\n                    }}</mat-icon>\n                </button>\n\n                <small\n                    *ngIf=\"\n                        adminControls['password'].invalid &&\n                        adminControls['password'].touched\n                    \"\n                >\n                    <ul>\n                        <li>Мінімум 9 символів</li>\n                        <li>Одна велика та мала буква та 1 цифра</li>\n                    </ul>\n                </small>\n            </mat-form-field>\n            <mat-form-field class=\"modal-field\">\n                <mat-label>Підтвердіть пароль</mat-label>\n                <input\n                    name=\"password_confirm\"\n                    matInput\n                    formControlName=\"password_confirm\"\n                    [type]=\"hide ? 'password' : 'text'\"\n                />\n                <button\n                    mat-icon-button\n                    matSuffix\n                    (click)=\"hide = !hide\"\n                    [attr.aria-label]=\"'Hide password'\"\n                    [attr.aria-pressed]=\"hide\"\n                >\n                    <mat-icon>{{\n                        hide ? 'visibility_off' : 'visibility'\n                    }}</mat-icon>\n                </button>\n\n                <small\n                    *ngIf=\"\n                        adminControls['password_confirm'].invalid &&\n                        adminControls['password_confirm'].touched\n                    \"\n                >\n                    Паролі не однакові\n                </small>\n            </mat-form-field>\n        </div>\n    </ng-template>\n    <div mat-dialog-actions class=\"modal-field\">\n        <button mat-button type=\"reset\" (click)=\"onNoClick()\">Скасувати</button>\n        <button type=\"submit\" [disabled]=\"!AdminForm.valid\" mat-button>\n            Зберегти\n        </button>\n    </div>\n</form>\n","import { FormGroup, ValidationErrors } from '@angular/forms';\n\nexport function MustMatch(\n    controlName: string,\n    matchingControlName: string\n): ValidationErrors {\n    return (formGroup: FormGroup) => {\n        const control = formGroup.controls[controlName];\n        const matchingControl = formGroup.controls[matchingControlName];\n\n        if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n            // return if another validator has already found an error on the matchingControl\n            return;\n        }\n\n        // set error on matchingControl if validation fails\n        if (control.value !== matchingControl.value) {\n            matchingControl.setErrors({ mustMatch: true });\n        } else {\n            matchingControl.setErrors(null);\n        }\n    };\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Component, Inject } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { pluck } from 'rxjs/operators';\nimport { AdminModalCreationComponent } from '../admin-modal-creation/admin-modal-creation.component';\nimport { ModalData } from '../Admins';\nimport { AdminsCrudService } from '../admins.service';\n\n@Component({\n    selector: 'app-delete-confirm-modal',\n    templateUrl: './delete-confirm-modal.component.html',\n    styleUrls: ['./delete-confirm-modal.component.scss'],\n})\nexport class DeleteConfirmModalComponent {\n    constructor(\n        public dialogRef: MatDialogRef<AdminModalCreationComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: ModalData,\n        private admincrud: AdminsCrudService,\n        private snackBar: MatSnackBar\n    ) {}\n\n    submit(data: any, form: NgForm): void {\n        if (form.submitted) {\n            this.admincrud\n                .deleteAdmin(data.user.id)\n                .pipe(pluck('response'))\n                .subscribe((res) => {\n                    if (res === 'ok') {\n                        this.snackBar.open(\n                            'Адміна успішно видалено',\n                            'Закрити',\n                            {\n                                duration: 3000,\n                            }\n                        );\n                        this.dialogRef.close({\n                            finished: true,\n                            user: data.user,\n                        });\n                    }\n                });\n        } else {\n            this.dialogRef.close({\n                finished: false,\n                user: data.user,\n            });\n        }\n    }\n    onNoClick(): void {\n        this.dialogRef.close();\n    }\n}\n","<form\n    action=\"post\"\n    (ngSubmit)=\"submit(data, DeleteForm)\"\n    novalidate\n    #DeleteForm=\"ngForm\"\n    class=\"admins-modal\"\n>\n    <h1 mat-dialog-title class=\"modal-title\">{{ data.title }}</h1>\n    <div mat-dialog-content>\n        <p class=\"delete-modal-text\">\n            <mat-icon class=\"delete-modal-icon\">person_remove</mat-icon><br />\n            Ви впевнені в тому що хочете видалити даного користувача?\n        </p>\n    </div>\n    <div mat-dialog-actions class=\"modal-field\">\n        <button mat-button type=\"reset\" (click)=\"onNoClick()\">Скасувати</button>\n        <button\n            type=\"submit\"\n            [disabled]=\"!DeleteForm.valid\"\n            mat-dialog-close\n            mat-button\n        >\n            Підтвердити\n        </button>\n    </div>\n</form>\n","/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { AdminModalCreationComponent } from './admin-modal-creation/admin-modal-creation.component';\nimport { DeleteConfirmModalComponent } from './delete-confirm-modal/delete-confirm-modal.component';\nimport { Admins } from './Admins';\nimport { AdminsCrudService } from './admins.service';\n\n@Component({\n    selector: 'app-admins',\n    templateUrl: './admins.component.html',\n    styleUrls: ['./admins.component.scss'],\n    providers: [AdminsCrudService],\n})\nexport class AdminsComponent implements OnInit {\n    displayedColumns: string[] = ['id', 'name', 'email', 'operations'];\n    dataSource: MatTableDataSource<Admins>;\n    adminsArray: [] = [];\n    subscribed = true;\n\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    @ViewChild(MatSort) sort: MatSort;\n\n    constructor(\n        private admincrud: AdminsCrudService,\n        public dialog: MatDialog\n    ) {}\n\n    applyFilter(event: Event): void {\n        const filterValue = (event.target as HTMLInputElement).value;\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n\n        if (this.dataSource.paginator) {\n            this.dataSource.paginator.firstPage();\n        }\n    }\n    addAdminModelOpen(): void {\n        this.dialog\n            .open(AdminModalCreationComponent, {\n                data: {\n                    title: 'Додати адміна',\n                },\n            })\n            .afterClosed()\n            .subscribe((res) => {\n                if (res) {\n                    if (res.finished) {\n                        this.dataSource.data = this.dataSource.data.concat(\n                            res.user\n                        );\n                        this.dataSource._updateChangeSubscription();\n                        this.dataSource.paginator = this.paginator;\n                    }\n                }\n            });\n    }\n    updateAdminModelOpen(user: Admins): void {\n        this.dialog\n            .open(AdminModalCreationComponent, {\n                data: {\n                    title: 'Редагувати адміна',\n                    user: {\n                        id: user.id,\n                        username: user.username,\n                        email: user.email,\n                    },\n                },\n            })\n            .afterClosed()\n            .subscribe((res) => {\n                if (!res || !res.finished) return null;\n                const oldIndex = this.dataSource.data.findIndex(\n                    (item) => item === user\n                );\n                this.dataSource.data = this.dataSource.data.map(\n                    (curUser: any, curIndex) => {\n                        return curIndex === oldIndex\n                            ? (curUser = res.user)\n                            : curUser;\n                    }\n                );\n            });\n    }\n    deleteAdminModelOpen(user: Admins): void {\n        this.dialog\n            .open(DeleteConfirmModalComponent, {\n                data: {\n                    title: 'Підтвердіть дію',\n                    user: user,\n                },\n            })\n            .afterClosed()\n            .subscribe((res) => {\n                if (!res) return;\n                if (res.finished) {\n                    this.dataSource.data.splice(\n                        this.dataSource.data.indexOf(res.user),\n                        1\n                    );\n                    this.dataSource._updateChangeSubscription();\n                    this.dataSource.paginator = this.paginator;\n                }\n            });\n    }\n    openModal(operationType: string, user?: Admins): void {\n        switch (operationType) {\n            case 'Add':\n                this.addAdminModelOpen();\n                break;\n            case 'Update':\n                this.updateAdminModelOpen(user);\n                break;\n            case 'Delete':\n                this.deleteAdminModelOpen(user);\n                break;\n        }\n    }\n    ngOnInit(): void {\n        this.admincrud.getAdmins().subscribe((admin) => {\n            this.adminsArray = admin;\n            this.dataSource = new MatTableDataSource(this.adminsArray);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n        });\n    }\n}\n","<div class=\"entity-header\">\n    <h1 class=\"mat-h1 entity-title\">\n        <mat-icon class=\"entity-title-icon\">supervised_user_circle </mat-icon\n        >Адміни\n    </h1>\n    <button mat-raised-button color=\"primary\" (click)=\"openModal('Add')\">\n        <mat-icon>add_circle</mat-icon> Додати Адміна\n    </button>\n</div>\n<mat-form-field>\n    <mat-label class=\"entity-search-label\"\n        ><mat-icon class=\"entity-search-icon\">person_search</mat-icon>\n        Пошук</mat-label\n    >\n    <input\n        matInput\n        (keyup)=\"applyFilter($event)\"\n        placeholder=\"Введіть характеристику\"\n        #input\n    />\n</mat-form-field>\n\n<div class=\"mat-elevation-z8\">\n    <table mat-table [dataSource]=\"dataSource\" matSort>\n        <!-- ID Column -->\n        <ng-container matColumnDef=\"id\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>\n            <td mat-cell *matCellDef=\"let item\">{{ item.id }}</td>\n        </ng-container>\n\n        <!-- Progress Column -->\n        <ng-container matColumnDef=\"email\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\n            <td mat-cell *matCellDef=\"let item\">{{ item.email }}</td>\n        </ng-container>\n\n        <!-- Name Column -->\n        <ng-container matColumnDef=\"name\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Назва</th>\n            <td mat-cell *matCellDef=\"let item\">{{ item.username }}</td>\n        </ng-container>\n\n        <!-- Operation Column -->\n        <ng-container matColumnDef=\"operations\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header>Операції</th>\n            <td mat-cell *matCellDef=\"let item\">\n                <button\n                    class=\"operation-button\"\n                    mat-flat-button\n                    color=\"primary\"\n                    matTooltip=\"Редагувати адміна\"\n                    (click)=\"openModal('Update', item)\"\n                >\n                    <mat-icon>create</mat-icon>\n                </button>\n                <button\n                    class=\"operation-button\"\n                    mat-flat-button\n                    color=\"primary\"\n                    matTooltip=\"Видалити адміна\"\n                    (click)=\"openModal('Delete', item)\"\n                >\n                    <mat-icon>delete</mat-icon>\n                </button>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n\n        <!-- Row shown when there is no matching data. -->\n        <tr class=\"mat-row\" *matNoDataRow>\n            <td class=\"mat-cell\" colspan=\"4\">\n                No data matching the filter \"{{ input.value }}\"\n            </td>\n        </tr>\n    </table>\n    <mat-paginator [pageSizeOptions]=\"[10, 15, 20, 25]\"></mat-paginator>\n</div>\n"],"sourceRoot":"webpack:///"}