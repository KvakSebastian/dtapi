{"version":3,"sources":["./src/app/modules/student/profile-page/profile.module.ts","./src/app/modules/student/profile-page/profile-page.component.ts","./src/app/modules/student/profile-page/profile-page.component.html","./src/app/modules/student/profile-page/profile-card/profile-card.component.ts","./src/app/modules/student/profile-page/profile-card/profile-card.component.html","./src/app/modules/student/profile-page/profile-table/profile-table.component.ts","./src/app/modules/student/profile-page/profile-table/profile-table.component.html"],"names":[],"mappings":"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","file":"profile-page-profile-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from 'src/app/shared/modules/shared.module';\n\nimport { ProfilePageComponent } from './profile-page.component';\nimport { ProfileTableComponent } from './profile-table/profile-table.component';\nimport { ProfileCardComponent } from './profile-card/profile-card.component';\n\n@NgModule({\n    declarations: [\n        ProfilePageComponent,\n        ProfileTableComponent,\n        ProfileCardComponent,\n    ],\n    imports: [\n        CommonModule,\n        SharedModule,\n        RouterModule.forChild([{ path: '', component: ProfilePageComponent }]),\n    ],\n})\nexport class ProfileModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ProfileService } from '../services/profile.service';\nimport { AlertService } from '../../../shared/services/alert.service';\nimport { ModalService } from '../../../shared/services/modal.service';\nimport { Subscription } from 'rxjs';\nimport {\n    DialogResult,\n    Response,\n    Subject,\n} from '../../../shared/interfaces/entity.interfaces';\nimport { StudentProfile } from '../../../shared/interfaces/student.interfaces';\nimport { profileMessages } from '../Messages';\nimport { TestPlayerResponse } from '../../../shared/interfaces/test-player.interfaces';\nimport { TestPlayerService } from '../services/test-player.service';\nimport { ConfirmComponent } from '../../../shared/components/confirm/confirm.component';\n\n@Component({\n    selector: 'app-profile-page',\n    templateUrl: './profile-page.component.html',\n    styleUrls: ['./profile-page.component.scss'],\n})\nexport class ProfilePageComponent implements OnInit, OnDestroy {\n    loading = false;\n    studentProfileData: StudentProfile;\n    subjects: Subject[] = [];\n    profileSubscription: Subscription;\n    groupId: number;\n\n    constructor(\n        private router: Router,\n        private profileService: ProfileService,\n        private testPlayerService: TestPlayerService,\n        public modalService: ModalService,\n        private alertService: AlertService\n    ) {}\n\n    ngOnInit(): void {\n        this.loading = true;\n        this.getStudentInfo();\n        this.getSubjectInfo();\n        this.getSession();\n        this.isMatch();\n    }\n\n    getStudentInfo(): void {\n        this.profileSubscription = this.profileService\n            .getAllStudentData()\n            .subscribe(\n                (response: StudentProfile) => {\n                    if (response) {\n                        this.alertService.message(\n                            profileMessages('welcome', response)\n                        );\n                        this.studentProfileData = response;\n                        this.groupId = response.group_id;\n                        this.loading = false;\n                    } else {\n                        this.studentProfileData = null;\n                        this.loading = false;\n                    }\n                },\n                (error: Response) => {\n                    this.loading = false;\n                    this.alertService.error(profileMessages('student'));\n                }\n            );\n    }\n\n    getSubjectInfo(): void {\n        this.profileSubscription = this.profileService\n            .getRecords('Subject')\n            .subscribe(\n                (response: Subject[]) => {\n                    if (response) {\n                        this.subjects = response;\n                    } else {\n                        this.alertService.message(\n                            profileMessages('emptySubjects')\n                        );\n                    }\n                },\n                (error: Response) => {\n                    this.loading = false;\n                    this.alertService.error(profileMessages('subjects'));\n                }\n            );\n    }\n\n    getSession(): void {\n        this.profileSubscription = this.testPlayerService\n            .testPlayerGetData()\n            .subscribe(\n                (response: TestPlayerResponse) => {\n                    if (\n                        response.id &&\n                        response.currentTest &&\n                        response.testInProgress\n                    ) {\n                        this.confirmContinueTest(\n                            response.currentTest.test_name,\n                            response.currentTest.subjectname\n                        );\n                    }\n                },\n                (error: Response) => {\n                    this.alertService.error(profileMessages('getSessionError'));\n                }\n            );\n    }\n\n    confirmContinueTest(testName: string, subjectName: string): void {\n        this.modalService.openModal(\n            ConfirmComponent,\n            {\n                data: {\n                    icon: 'school',\n                    message: profileMessages(\n                        'continueTest',\n                        null,\n                        testName,\n                        subjectName\n                    ),\n                },\n            },\n            (result: DialogResult) => {\n                if (result) {\n                    this.router.navigate(['student/test-player']);\n                } else if (!result) {\n                    this.alertService.message(\n                        profileMessages('snackbarCancel', null, testName)\n                    );\n                }\n            }\n        );\n    }\n\n    isMatch(): void {\n        const match = localStorage.getItem('isMatch');\n        if (match === 'notMatch') {\n            this.alertService.error(profileMessages('isMatch'));\n        }\n        localStorage.setItem('isMatch', null);\n    }\n\n    ngOnDestroy(): void {\n        if (this.profileSubscription) {\n            this.profileSubscription.unsubscribe();\n        }\n    }\n}\n","<div class=\"profile\" *ngIf=\"!loading; else loader\">\n    <div class=\"profile__student-info\">\n        <app-profile-card [profileData]=\"studentProfileData\"></app-profile-card>\n    </div>\n\n    <div\n        class=\"profile__test\"\n        *ngIf=\"subjects.length && studentProfileData; else empty\"\n    >\n        <app-profile-table\n            [subjects]=\"subjects\"\n            [groupId]=\"groupId\"\n        ></app-profile-table>\n    </div>\n    <ng-template #empty>\n        <div class=\"empty-data\" *ngIf=\"!studentProfileData\">\n            <mat-icon class=\"empty-data-icon\">report</mat-icon>\n            <h1 class=\"empty-data-text\">Дані студента відсутні</h1>\n        </div>\n    </ng-template>\n</div>\n\n<ng-template #loader>\n    <app-loader></app-loader>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { StudentProfile } from '../../../../shared/interfaces/student.interfaces';\nimport { environment } from '../../../../../environments/environment';\n\n@Component({\n    selector: 'app-profile-card',\n    templateUrl: './profile-card.component.html',\n    styleUrls: ['./profile-card.component.scss'],\n})\nexport class ProfileCardComponent {\n    @Input() profileData: StudentProfile;\n    defaultImage: string = environment.defaultImage;\n}\n","<div class=\"profile-card\" *ngIf=\"profileData\">\n    <h1 class=\"profile-card__title\">\n        <mat-icon class=\"header-icon\">assignment_ind</mat-icon> Профіль студента\n    </h1>\n    <mat-card matRipple>\n        <div class=\"card\">\n            <div class=\"profile-card__student-photo\">\n                <img\n                    class=\"student-photo\"\n                    *ngIf=\"profileData.photo !== ''\"\n                    mat-card-lg-image\n                    src=\"{{ profileData.photo }}\"\n                    alt=\"{{ profileData.student_fname }} {{\n                        profileData.student_name\n                    }}\"\n                />\n                <img\n                    class=\"student-photo\"\n                    *ngIf=\"profileData.photo === ''\"\n                    mat-card-lg-image\n                    src=\"{{ defaultImage }}\"\n                    alt=\"{{ profileData.student_fname }} {{\n                        profileData.student_name\n                    }}\"\n                />\n            </div>\n            <mat-card-content>\n                <div class=\"profile-card__student-data\">\n                    <div class=\"profile-card__student-title\">\n                        <h2>\n                            {{ profileData.student_surname }}\n                            {{ profileData.student_name }}\n                            {{ profileData.student_fname }}\n                        </h2>\n                    </div>\n\n                    <div class=\"profile-card__student-other-data\">\n                        <div class=\"profile-card__data-title\">\n                            <h2 class=\"title\">Факультет:</h2>\n                        </div>\n                        <h2>\n                            {{ profileData.faculty_name }}\n                        </h2>\n                    </div>\n\n                    <mat-divider></mat-divider>\n\n                    <div class=\"profile-card__student-other-data\">\n                        <div class=\"profile-card__data-title\">\n                            <h2 class=\"title\">Спеціальність:</h2>\n                        </div>\n                        <h2>\n                            {{ profileData.speciality_code }}\n                            {{ profileData.speciality_name }}\n                        </h2>\n                    </div>\n\n                    <mat-divider></mat-divider>\n\n                    <div class=\"profile-card__student-other-data\">\n                        <div class=\"profile-card__data-title\">\n                            <h2 class=\"title\">Група:</h2>\n                        </div>\n                        <h2>\n                            {{ profileData.group_name }}\n                        </h2>\n                    </div>\n\n                    <mat-divider></mat-divider>\n\n                    <div class=\"profile-card__student-other-data\">\n                        <div class=\"profile-card__data-title\">\n                            <h2 class=\"title\">Номер залікової:</h2>\n                        </div>\n                        <h2>\n                            {{ profileData.gradebook_id }}\n                        </h2>\n                    </div>\n                </div>\n            </mat-card-content>\n        </div>\n    </mat-card>\n</div>\n","import {\n    AfterViewInit,\n    Component,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatSelectChange } from '@angular/material/select';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ModalService } from '../../../../shared/services/modal.service';\nimport { AlertService } from '../../../../shared/services/alert.service';\nimport { ProfileService } from '../../services/profile.service';\nimport { TestPlayerService } from '../../services/test-player.service';\nimport { ConfirmComponent } from '../../../../shared/components/confirm/confirm.component';\nimport { of, Subscription, from, forkJoin } from 'rxjs';\nimport { concatMap, mergeMap, map } from 'rxjs/operators';\nimport {\n    TestDate,\n    TestDetails,\n} from '../../../../shared/interfaces/student.interfaces';\nimport {\n    DialogResult,\n    Response,\n    Subject,\n} from '../../../../shared/interfaces/entity.interfaces';\nimport {\n    TestLog,\n    TestLogError,\n    TestPlayerResponse,\n    TestPlayerSaveData,\n} from '../../../../shared/interfaces/test-player.interfaces';\nimport {\n    testsTableColumns,\n    checkTestDateMessages,\n    scheduleMessages,\n    snackBarMessages,\n    startTestPlayerMessages,\n} from '../../Messages';\n\n@Component({\n    selector: 'app-profile-table',\n    templateUrl: './profile-table.component.html',\n    styleUrls: ['./profile-table.component.scss'],\n})\nexport class ProfileTableComponent implements OnInit, AfterViewInit, OnDestroy {\n    @Input() subjects: Subject[];\n    @Input() groupId: number;\n    newSubjects = [];\n    subjectsIds: Array<string>;\n    currentDate: Date;\n    subjectName: string;\n    subjectID: string;\n    hide = false;\n    startText = false;\n    testsBySubject: TestDetails[] = [];\n    testDetails: TestDate[] = [];\n    allTestDetails: TestDate[] = [];\n    dataSource = new MatTableDataSource<TestDate>();\n    displayedColumns: string[] = testsTableColumns;\n    profileSubscription: Subscription;\n\n    @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;\n\n    constructor(\n        public modalService: ModalService,\n        private router: Router,\n        private profileService: ProfileService,\n        private testPlayerService: TestPlayerService,\n        private alertService: AlertService\n    ) {}\n\n    ngOnInit(): void {\n        this.currentDate = new Date();\n        this.hide = true;\n        this.getTestInfoByGroup();\n    }\n\n    ngAfterViewInit(): void {\n        this.paginator._intl.itemsPerPageLabel = 'Рядків у таблиці';\n        this.dataSource.paginator = this.paginator;\n    }\n\n    applyFilter(event: Event): void {\n        const filterValue = (event.target as HTMLInputElement).value;\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n        if (this.dataSource.paginator) {\n            this.dataSource.paginator.firstPage();\n        }\n    }\n\n    getTestInfoByGroup(): void {\n        this.dataSource = new MatTableDataSource();\n        this.profileSubscription = this.profileService\n            .getTestDetails(this.groupId)\n            .pipe(\n                mergeMap((res: TestDetails[]) => {\n                    if (res.length) {\n                        this.testsBySubject = res;\n                        this.subjectsIds = res.map((item) => item.subject_id);\n                        this.alertService.message(scheduleMessages('isTests'));\n                        const observables = this.subjectsIds.map((id) =>\n                            this.profileService.getTestDate(id)\n                        );\n                        return forkJoin(observables);\n                    } else {\n                        this.startText = true;\n                        this.testsBySubject = [];\n                        this.alertService.message(scheduleMessages('noTests'));\n                        return of();\n                    }\n                })\n            )\n            .subscribe({\n                next: (res: []) => {\n                    if (!this.newSubjects.length) {\n                        this.getNewSubjects(this.testsBySubject);\n                    }\n                    this.testsBySubject.forEach((test) => {\n                        let detailes: any;\n                        res.forEach((item: []) => {\n                            detailes = item.forEach((elem: TestDate) => {\n                                if (elem.subject_id === test.subject_id) {\n                                    detailes = {\n                                        ...test,\n                                        ...elem,\n                                        subjectname: this.getSubName(\n                                            test.subject_id\n                                        ),\n                                    };\n                                    this.testDetails.push(detailes);\n                                }\n                            });\n                        });\n                    });\n                    this.dataSource.data = this.testDetails;\n                    this.dataSource.paginator = this.paginator;\n                },\n                error: (error: Response) => {\n                    this.alertService.error(\n                        scheduleMessages('activeTestsError')\n                    );\n                },\n            });\n    }\n\n    selectSubject(event: MatSelectChange): void {\n        const subjectData = event.value;\n        if (subjectData === 'ALL') {\n            this.getTestInfoByGroup();\n        } else {\n            this.subjectID = subjectData.id;\n            this.subjectName = subjectData.name;\n            this.getTestInfo();\n        }\n    }\n\n    getTestInfo(): void {\n        this.profileSubscription = this.profileService\n            .getTestDate(this.subjectID)\n            .pipe(\n                concatMap((res: TestDetails[]) => {\n                    if (res.length) {\n                        this.testsBySubject = res;\n                        this.alertService.message(scheduleMessages('isTests'));\n                        return this.profileService.getTestDetails(this.groupId);\n                    } else {\n                        this.hide = false;\n                        this.testsBySubject = [];\n                        this.alertService.message(scheduleMessages('noTests'));\n                        return of();\n                    }\n                })\n            )\n            .subscribe({\n                next: (res: TestDate) => {\n                    let testDate = res[0] ? res[0] : res;\n                    if (testDate.response === 'no records') {\n                        testDate = {\n                            end_date: scheduleMessages('noTestData'),\n                            start_date: scheduleMessages('noTestData'),\n                        };\n                    }\n                    this.testDetails = [...this.testsBySubject].map((test) => ({\n                        ...test,\n                        ...testDate,\n                        subjectname: this.subjectName,\n                    }));\n                    this.dataSource = new MatTableDataSource(this.testDetails);\n                    this.dataSource.paginator = this.paginator;\n                },\n                error: (error: Response) => {\n                    this.alertService.error(\n                        scheduleMessages('subjectTestsError', this.subjectName)\n                    );\n                },\n            });\n    }\n\n    getSubName(id: string): string {\n        const currentSpec = this.subjects.filter(\n            (item) => item.subject_id === id\n        );\n        return currentSpec[0].subject_name;\n    }\n\n    getNewSubjects(res: TestDetails[]): void {\n        res.forEach((elem) => {\n            const newElem = this.subjects.filter(\n                (item) => elem.subject_id === item.subject_id\n            );\n            this.newSubjects.push(newElem[0]);\n        });\n    }\n\n    checkCurrentDate(test: TestDate | any): string {\n        const startDate = new Date(`${test.start_date}`);\n        const startDateWithTime = new Date(\n            `${test.start_date} ${test.start_time}`\n        );\n        const endDate = new Date(`${test.end_date} ${test.end_time}`);\n        if (this.currentDate >= startDate && this.currentDate <= endDate) {\n            return checkTestDateMessages('willBeAvailableToday', test);\n        } else if (\n            this.currentDate > startDateWithTime &&\n            this.currentDate > endDate\n        ) {\n            return checkTestDateMessages('noAvailable', test);\n        } else if (\n            this.currentDate < startDateWithTime &&\n            this.currentDate < endDate\n        ) {\n            return checkTestDateMessages('willBeAvailableLater', test);\n        } else {\n            return checkTestDateMessages('notData', test);\n        }\n    }\n\n    checkPossibilityToPassTest(test: TestDetails): void {\n        this.profileSubscription = this.profileService\n            .testPlayerGetTest(test.test_id)\n            .subscribe(\n                () => {\n                    this.confirmStartTest(test);\n                },\n                (error: Response) => {\n                    this.alertService.warning(this.checkCurrentDate(test));\n                }\n            );\n    }\n\n    confirmStartTest(test: TestDetails): void {\n        this.modalService.openModal(\n            ConfirmComponent,\n            {\n                data: {\n                    icon: 'school',\n                    message: scheduleMessages('confirmStartTest', '', test),\n                },\n            },\n            (result: DialogResult) => {\n                if (result) {\n                    this.startTest(test);\n                } else if (!result) {\n                    this.alertService.message(snackBarMessages('cancel'));\n                }\n            }\n        );\n    }\n\n    startTest(test: TestDetails): void {\n        this.profileSubscription = this.testPlayerService\n            .getLog(+test.test_id)\n            .subscribe(\n                (log: TestLog) => {\n                    if (log.response === 'ok') {\n                        this.saveSession(test);\n                        this.modalService.showSnackBar(\n                            startTestPlayerMessages('startTest')\n                        );\n                    }\n                },\n                (error: TestLogError) => {\n                    this.startTestErrorHandler(error, test);\n                }\n            );\n    }\n\n    saveSession(test: TestDetails): void {\n        this.profileSubscription = this.testPlayerService\n            .testPlayerSaveData({\n                id: +test.test_id,\n                testInProgress: true,\n                currentTest: test,\n            })\n            .subscribe(\n                (response: TestPlayerSaveData) => {\n                    if (response.response) {\n                        this.router.navigate(['student/test-player']);\n                    }\n                },\n                (error: Response) => {\n                    this.alertService.error(\n                        startTestPlayerMessages('saveSessionError')\n                    );\n                }\n            );\n    }\n\n    getSession(test: TestDetails): void {\n        this.profileSubscription = this.testPlayerService\n            .testPlayerGetData()\n            .subscribe(\n                (response: TestPlayerResponse) => {\n                    if (+response.id === +test.test_id) {\n                        this.router.navigate(['student/test-player']);\n                    } else {\n                        this.alertService.error(\n                            startTestPlayerMessages('makingTest', false)\n                        );\n                    }\n                },\n                (error: Response) => {\n                    this.alertService.error(\n                        startTestPlayerMessages('getSessionError')\n                    );\n                }\n            );\n    }\n\n    startTestErrorHandler(error: TestLogError, test: TestDetails): void {\n        switch (error.error.response) {\n            case startTestPlayerMessages('scheduleError', true):\n                this.alertService.error(\n                    startTestPlayerMessages('scheduleError', false)\n                );\n                break;\n            case startTestPlayerMessages('numberOfQuestions', true):\n                this.alertService.error(\n                    startTestPlayerMessages('numberOfQuestions', false)\n                );\n                break;\n            case startTestPlayerMessages('allAttempts', true):\n                this.alertService.error(\n                    startTestPlayerMessages('allAttempts', false)\n                );\n                break;\n            case startTestPlayerMessages('makingTest', true):\n                this.getSession(test);\n                break;\n            case startTestPlayerMessages('onlyForYou', true):\n                this.alertService.error(\n                    startTestPlayerMessages('onlyForYou', false)\n                );\n                break;\n            case startTestPlayerMessages('paramsNotFound', true):\n                this.alertService.error(\n                    startTestPlayerMessages('paramsNotFound', false)\n                );\n                break;\n            case startTestPlayerMessages('madeRecently', true):\n                this.alertService.error(\n                    startTestPlayerMessages('madeRecently', false)\n                );\n                break;\n            default:\n                this.alertService.error(startTestPlayerMessages('default'));\n                break;\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.profileSubscription) {\n            this.profileSubscription.unsubscribe();\n        }\n    }\n}\n","<div class=\"profile-table\">\n    <h1 class=\"profile-table__title\">\n        <mat-icon class=\"header-icon\">schedule</mat-icon> Розклад тестування\n    </h1>\n    <mat-form-field class=\"select-subject\">\n        <mat-label>\n            <mat-icon class=\"search-icon\">collections_bookmark</mat-icon>\n            Предмети\n        </mat-label>\n        <mat-select\n            (selectionChange)=\"selectSubject($event)\"\n            class=\"profile-select\"\n        >\n            <mat-option\n                *ngFor=\"let subject of newSubjects\"\n                [value]=\"{ name: subject.subject_name, id: subject.subject_id }\"\n            >\n                {{ subject.subject_name }}\n            </mat-option>\n            <mat-option value=\"ALL\"> Показати всі </mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <mat-form-field>\n        <mat-label>\n            <mat-icon class=\"search-icon\">person_search</mat-icon>\n            Фільтр\n        </mat-label>\n        <input\n            [disabled]=\"!testsBySubject.length || !dataSource.data.length\"\n            matInput\n            (keyup)=\"applyFilter($event)\"\n            placeholder=\"Здійснюйте фільтрацію по всіх колонках таблиці\"\n            #input\n        />\n    </mat-form-field>\n    <div\n        class=\"mat-elevation-z8 profile-table__table\"\n        [hidden]=\"!testsBySubject.length || !dataSource.data.length\"\n    >\n        <table\n            mat-table\n            [dataSource]=\"dataSource\"\n            class=\"profile-table__table mat-elevation-z8\"\n        >\n            <ng-container matColumnDef=\"Предмет\">\n                <th mat-header-cell *matHeaderCellDef>Предмет</th>\n                <td mat-cell *matCellDef=\"let test\">\n                    {{ test.subjectname }}\n                </td>\n            </ng-container>\n            <ng-container matColumnDef=\"Тест\">\n                <th mat-header-cell *matHeaderCellDef>Тест</th>\n                <td mat-cell *matCellDef=\"let test\">\n                    {{ test.test_name }}\n                </td>\n            </ng-container>\n            <ng-container matColumnDef=\"Початок\">\n                <th mat-header-cell *matHeaderCellDef>Початок</th>\n                <td mat-cell *matCellDef=\"let test\">\n                    <span>{{ test.start_date }}</span> <br />\n                    {{ test.start_time }}\n                </td>\n            </ng-container>\n            <ng-container matColumnDef=\"Кінець\">\n                <th mat-header-cell *matHeaderCellDef>Кінець</th>\n                <td mat-cell *matCellDef=\"let test\">\n                    <span> {{ test.end_date }}</span\n                    ><br />\n                    {{ test.end_time }}\n                </td>\n            </ng-container>\n            <ng-container matColumnDef=\"Кількість завдань\">\n                <th mat-header-cell *matHeaderCellDef>К-сть завдань</th>\n                <td mat-cell *matCellDef=\"let test\">{{ test.tasks }}</td>\n            </ng-container>\n            <ng-container matColumnDef=\"Тривалість тесту\">\n                <th mat-header-cell *matHeaderCellDef>Тривалість</th>\n                <td mat-cell *matCellDef=\"let test\">\n                    {{ test.time_for_test }}\n                </td>\n            </ng-container>\n            <ng-container matColumnDef=\"Кількість спроб\">\n                <th mat-header-cell *matHeaderCellDef>К-сть спроб</th>\n                <td mat-cell *matCellDef=\"let test\">{{ test.attempts }}</td>\n            </ng-container>\n            <ng-container matColumnDef=\"Почати тестування\">\n                <th mat-header-cell *matHeaderCellDef>Здати тест</th>\n                <td mat-cell *matCellDef=\"let test\">\n                    <button\n                        class=\"operation-button\"\n                        mat-flat-button\n                        color=\"primary\"\n                        matTooltip=\"Натисніть, щоб розпочати\"\n                        (click)=\"checkPossibilityToPassTest(test)\"\n                    >\n                        <mat-icon>not_started</mat-icon>\n                    </button>\n                </td>\n            </ng-container>\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n            <tr class=\"mat-row\" *matNoDataRow>\n                <td class=\"mat-cell\" colspan=\"4\">\n                    Нічого не знайдено за заданим фільтром \"{{ input.value }}\"\n                </td>\n            </tr>\n        </table>\n        <mat-paginator\n            [pageSizeOptions]=\"[5, 10, 20]\"\n            showFirstLastButtons\n        ></mat-paginator>\n    </div>\n    <div class=\"empty-data-test\" *ngIf=\"!testsBySubject.length && !hide\">\n        <mat-icon class=\"dark-theme-icon\">report</mat-icon>\n        <h1>\n            Тести з даного предмету <br />\n            відсутні\n        </h1>\n    </div>\n    <div\n        class=\"empty-data-test select\"\n        *ngIf=\"!dataSource.data.length && startText\"\n    >\n        <mat-icon class=\"dark-theme-icon\">playlist_add_check</mat-icon>\n        <h1>Оберіть предмет для тестування</h1>\n    </div>\n</div>\n"],"sourceRoot":"webpack:///"}